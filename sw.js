function Origin(t){const o=t.protocol,e=t.host;if(!o||!e)throw new Error("class WhiteListedCacheDomains cannot be constructed with protocol: "+o+" , host: "+e);this.protocol=o,this.host=e,this.matchOriginOf=function(t){return t.startsWith(this.protocol+"//"+this.host)}}function isCacheable(t){return whitelistedCacheOrigins.some(function(o){return o.matchOriginOf(t)})}function cachePromise(t,o){return caches.open(CACHE_NAME).then(function(e){const n=o.clone();return e.put(t,n),o})}function retrievePromise(t,o){return caches.open(CACHE_NAME).then(function(e){return e.match(t).then(function(t){return t||o})})}importScripts("/pwa/polyfills/serviceworker-cache.js");const VERSION="0.0.6",CACHE_NAME="CACHE_CATS_"+VERSION,CACHE_ROUTES=["/"];console.log("Cache at",CACHE_NAME);const whitelistedCacheOrigins=[new Origin({protocol:"https:",host:"fonts.googleapis.com"}),new Origin({protocol:"https:",host:"fonts.gstatic.com"}),new Origin({protocol:self.location.protocol,host:self.location.host})];self.addEventListener("install",function(t){t.waitUntil(caches.open(CACHE_NAME).then(function(t){return t.addAll(CACHE_ROUTES)}))}),self.addEventListener("fetch",function(t){const o=t.request;t.respondWith(fetch(o).then(function(t){return t&&t.status>=300&&t.status<=399?t:isCacheable(o.url,t)&&t&&t.status>=200&&t.status<=299?cachePromise(o,t):t&&t.status>=400&&t.status<=599?retrievePromise(o,t):t})["catch"](function(t){return retrievePromise(o,t)}))});